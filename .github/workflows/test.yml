name: Run Tests

on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.sha }}
  cancel-in-progress: true

jobs:
  code-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: set up Poetry
        uses: abatilo/actions-poetry@v4
      - name: set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.9"
          cache: "poetry"
      - name: install dependencies
        run: poetry install --all-extras --with dev
      - name: pre-commit, mypy & pylint
        run: |
          poetry run pre-commit run --all-files
          poetry run mypy ./nicegui --non-interactive
          poetry run pylint ./nicegui
  test:
    strategy:
      matrix:
        python: ["3.12"]
      fail-fast: false
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v5
      - name: set up Poetry
        uses: abatilo/actions-poetry@v4
      - name: set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}
          cache: "poetry"
      - name: install dependencies
        run: |
          set -x
          poetry install --all-extras
          # install packages to run the examples
          poetry run pip install opencv-python opencv-contrib-python-headless httpx isort replicate langchain openai simpy tortoise-orm
          poetry run pip install -r tests/requirements.txt
          # try fix issue with importlib_resources
          poetry run pip install importlib-resources
      # - name: test startup
      #   run: poetry run ./test_startup.sh
      - name: setup chromedriver
        uses: nanasess/setup-chromedriver@v2.3.0
      - name: pytest -k test_label
        run: poetry run pytest
      - name: Generate screenshot report
        if: failure()
        run: |
          echo "## 📸 Failed Test Screenshots (Python ${{ matrix.python }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d "screenshots-red" ] && [ "$(ls -A screenshots-red)" ]; then
            for screenshot in screenshots-red/*.png; do
              test_name=$(basename "$screenshot" .png)
              echo "### ❌ $test_name" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details><summary>Click to view screenshot</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              base64_img=$(base64 -w 0 "$screenshot" 2>/dev/null || base64 "$screenshot" | tr -d '\n')
              echo "<img src=\"data:image/png;base64,$base64_img\" alt=\"$test_name\" style=\"max-width:100%;\"/>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "No failed screenshots found." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💾 Full-size screenshots are also available in the artifacts (see bottom of this page)." >> $GITHUB_STEP_SUMMARY
      - name: Upload failed screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-red-${{ matrix.python }}
          path: screenshots-red/**
          retention-days: 14

  slack:
    needs:
      - test
      - code-check
    if: always() # also execute when test fail
    runs-on: ubuntu-latest
    steps:
      - name: Determine if we need to notify
        uses: Jimdo/should-i-notify-action@main
        id: should_notify
        with:
          needs_context: ${{ toJson(needs) }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if secret exists
        id: check_secret
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_ROBOTICS_CI_WEBHOOK }}
        run: |
          if [[ -z "$SLACK_WEBHOOK" ]]; then
            echo "slack_webhook_exists=false" >> $GITHUB_ENV
          else
            echo "slack_webhook_exists=true" >> $GITHUB_ENV
          fi
      - name: Slack workflow notification
        if: steps.should_notify.outputs.should_send_message == 'yes' && env.slack_webhook_exists == 'true'
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_ROBOTICS_CI_WEBHOOK }}
          channel: "robotik-ci"
          name: "NiceGUI"
