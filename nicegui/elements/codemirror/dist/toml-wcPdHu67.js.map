{"version":3,"file":"toml-wcPdHu67.js","sources":["../node_modules/@codemirror/legacy-modes/mode/toml.js"],"sourcesContent":["export const toml = {\n  name: \"toml\",\n  startState: function () {\n    return {\n      inString: false,\n      stringType: \"\",\n      lhs: true,\n      inArray: 0\n    };\n  },\n  token: function (stream, state) {\n    //check for state changes\n    if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n      state.stringType = stream.peek();\n      stream.next(); // Skip quote\n      state.inString = true; // Update state\n    }\n    if (stream.sol() && state.inArray === 0) {\n      state.lhs = true;\n    }\n    //return state\n    if (state.inString) {\n      while (state.inString && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.inString = false; // Clear flag\n        } else if (stream.peek() === '\\\\') {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n    } else if (state.inArray && stream.peek() === ']') {\n      stream.next();\n      state.inArray--;\n      return 'bracket';\n    } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n      stream.next();//skip closing ]\n      // array of objects has an extra open & close []\n      if (stream.peek() === ']') stream.next();\n      return \"atom\";\n    } else if (stream.peek() === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n      return \"property\";\n    } else if (state.lhs && stream.peek() === \"=\") {\n      stream.next();\n      state.lhs = false;\n      return null;\n    } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n      return 'atom'; //date\n    } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n      return 'atom';\n    } else if (!state.lhs && stream.peek() === '[') {\n      state.inArray++;\n      stream.next();\n      return 'bracket';\n    } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n      return 'number';\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  },\n  languageData: {\n    commentTokens: { line: '#' },\n  },\n};\n"],"names":["toml","name","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","languageData","commentTokens","line"],"mappings":"AAAY,MAACA,EAAO,CAClBC,KAAM,OACNC,WAAY,WACV,MAAO,CACLC,UAAU,EACVC,WAAY,GACZC,KAAK,EACLC,QAAS,EAEb,EACAC,MAAO,SAAUC,EAAQC,GAWvB,GATKA,EAAMN,UAA+B,KAAjBK,EAAOE,QAAoC,KAAjBF,EAAOE,SACxDD,EAAML,WAAaI,EAAOE,OAC1BF,EAAOG,OACPF,EAAMN,UAAW,GAEfK,EAAOI,OAA2B,IAAlBH,EAAMH,UACxBG,EAAMJ,KAAM,GAGVI,EAAMN,SAAU,CAClB,KAAOM,EAAMN,WAAaK,EAAOK,OAC3BL,EAAOE,SAAWD,EAAML,YAC1BI,EAAOG,OACPF,EAAMN,UAAW,GACU,OAAlBK,EAAOE,QAChBF,EAAOG,OACPH,EAAOG,QAEPH,EAAOM,MAAM,gBAGjB,OAAOL,EAAMJ,IAAM,WAAa,QAClC,CAAO,OAAII,EAAMH,SAA6B,MAAlBE,EAAOE,QACjCF,EAAOG,OACPF,EAAMH,UACC,WACEG,EAAMJ,KAAyB,MAAlBG,EAAOE,QAAkBF,EAAOO,OAAO,MAC7DP,EAAOG,OAEe,MAAlBH,EAAOE,QAAgBF,EAAOG,OAC3B,QACoB,MAAlBH,EAAOE,QAChBF,EAAOQ,YACA,WACER,EAAOS,WACT,KACER,EAAMJ,KAAOG,EAAOU,SAAS,SAAUC,GAAK,MAAY,KAALA,GAAiB,KAALA,CAAU,GAC3E,WACEV,EAAMJ,KAAyB,MAAlBG,EAAOE,QAC7BF,EAAOG,OACPF,EAAMJ,KAAM,EACL,OACGI,EAAMJ,KAAOG,EAAOM,MAAM,0BAC7B,OACGL,EAAMJ,MAAQG,EAAOM,MAAM,UAAWN,EAAOM,MAAM,SAEnDL,EAAMJ,KAAyB,MAAlBG,EAAOE,QAIpBD,EAAMJ,KAAOG,EAAOM,MAAM,qBAC7B,UACGN,EAAOS,YACjBT,EAAOG,OAEF,OARLF,EAAMH,UACNE,EAAOG,OACA,WAJA,MAWX,EACAS,aAAc,CACZC,cAAe,CAAEC,KAAM","x_google_ignoreList":[0]}