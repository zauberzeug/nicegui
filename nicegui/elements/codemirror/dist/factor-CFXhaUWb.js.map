{"version":3,"file":"factor-CFXhaUWb.js","sources":["../node_modules/@codemirror/legacy-modes/mode/factor.js"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nexport const factor = simpleMode({\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    languageData: {\n      name: \"factor\",\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      commentTokens: {line: \"!\"}\n    }\n  });\n"],"names":["factor","simpleMode","start","regex","token","next","vocabulary","string","string2","string3","stack","languageData","name","dontIndentStates","commentTokens","line"],"mappings":"8CAEY,MAACA,EAASC,EAAW,CAC7BC,MAAO,CAEL,CAACC,MAAO,QAASC,MAAO,WAExB,CAACD,MAAO,MAAOC,MAAO,SAAUC,KAAM,WACtC,CAACF,MAAO,gBAAiBC,MAAO,CAAC,UAAW,MAAOC,KAAM,WACzD,CAACF,MAAO,QAASC,MAAO,SAAUC,KAAM,UAExC,CAACF,MAAO,kEAAmEC,MAAO,UAGlF,CAACD,MAAO,yCAA0CC,MAAO,CAAC,UAAW,KAAM,MAAO,KAAM,WAAYC,KAAM,SAE1G,CAACF,MAAO,4BAA6BC,MAAO,CAAC,UAAW,KAAM,MAAO,KAAM,QAE3E,CAACD,MAAO,UAAWC,MAAO,UAAWC,KAAM,cAE3C,CAACF,MAAO,iCAAkCC,MAAO,CAAC,UAAW,KAAM,QAEnE,CAACD,MAAO,4BAA6BC,MAAO,CAAC,UAAW,KAAM,QAE9D,CAACD,MAAO,qFAAsFC,MAAO,WAErG,CAACD,MAAO,0BAA2BC,MAAO,WAC1C,CAACD,MAAO,qBAAsBC,MAAO,WAErC,CAACD,MAAO,6BAA8BC,MAAO,WAE7C,CAACD,MAAO,MAAOC,MAAO,YACtB,CAACD,MAAO,QAASC,MAAO,OAE1BE,WAAY,CACV,CAACH,MAAO,IAAKC,MAAO,UAAWC,KAAM,SACrC,CAACF,MAAO,MAAOC,MAAO,OACtB,CAACD,MAAO,QAASC,MAAO,OAE1BG,OAAQ,CACN,CAACJ,MAAO,mBAAoBC,MAAO,SAAUC,KAAM,SACnD,CAACF,MAAO,KAAMC,MAAO,WAEvBI,QAAS,CACP,CAACL,MAAO,KAAMC,MAAO,UAAWC,KAAM,SACtC,CAACF,MAAO,KAAMC,MAAO,WAEvBK,QAAS,CACP,CAACN,MAAO,qBAAsBC,MAAO,SAAUC,KAAM,SACrD,CAACF,MAAO,KAAMC,MAAO,WAEvBM,MAAO,CACL,CAACP,MAAO,KAAMC,MAAO,UAAWC,KAAM,SACtC,CAACF,MAAO,KAAMC,MAAO,WACrB,CAACD,MAAO,MAAOC,MAAO,QACtB,CAACD,MAAO,QAASC,MAAO,OAE1BO,aAAc,CACZC,KAAM,SACNC,iBAAkB,CAAC,QAAS,aAAc,SAAU,UAAW,SAC/DC,cAAe,CAACC,KAAM","x_google_ignoreList":[0]}